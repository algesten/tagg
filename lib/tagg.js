// Generated by CoffeeScript 1.10.0
(function() {
  var StringOut, apply, asfun, asfuns, attr, attrs, bool, capture, each, elems, esc, esca, filter, html5, isfunction, isplain, isprimitive, isstring, keyval, ktrue, maketag, map, merge, mixin, nnot, noplain, oneobj, onlyplain, out, pass, splitcm, tag, tags, unnest, vods,
    slice = [].slice;

  isplain = function(o) {
    return !!o && typeof o === 'object' && o.constructor === Object;
  };

  isstring = function(s) {
    return typeof s === 'string';
  };

  isprimitive = function(a) {
    var ref;
    return (ref = typeof a) === 'boolean' || ref === 'number' || ref === 'string' || ref === 'symbol';
  };

  isfunction = function(s) {
    return typeof s === 'function';
  };

  nnot = function(f) {
    return function() {
      var a;
      a = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return !f.apply(null, a);
    };
  };

  mixin = function() {
    var j, k, len1, o, os, r, v;
    os = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    r = {};
    for (j = 0, len1 = os.length; j < len1; j++) {
      o = os[j];
      for (k in o) {
        v = o[k];
        r[k] = v;
      }
    }
    return r;
  };

  splitcm = function(s) {
    return s.split(',');
  };

  merge = function() {
    var j, k, len1, o, os, t, v;
    t = arguments[0], os = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    for (j = 0, len1 = os.length; j < len1; j++) {
      o = os[j];
      for (k in o) {
        v = o[k];
        t[k] = v;
      }
    }
    return t;
  };

  mixin = function() {
    var os;
    os = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return merge.apply(null, [{}].concat(slice.call(os)));
  };

  apply = function(fn) {
    return function(args) {
      return fn.apply(this, args);
    };
  };

  keyval = function(k, v) {
    var o;
    o = {};
    o[k] = v;
    return o;
  };

  ktrue = function(k) {
    return keyval(k, true);
  };

  map = function(f) {
    return function(as) {
      var i, len, r;
      r = Array(as.length);
      len = as.length;
      i = 0;
      for (;i < len; ++i) { r[i] = f(as[i]) };
      return r;
    };
  };

  each = function(f) {
    return function(as) {
      var i, len;
      len = as.length;
      i = 0;
      for (;i < len; ++i) { f(as[i]) };
      return void 0;
    };
  };

  filter = function(f) {
    return function(as) {
      var j, len1, r, ri, v;
      r = [];
      ri = -1;
      for (j = 0, len1 = as.length; j < len1; j++) {
        v = as[j];
        if (f(v)) {
          r[++ri] = v;
        }
      }
      return r;
    };
  };

  bool = apply(mixin)(map(ktrue)(splitcm('allowfullscreen,async,autofocus,autoplay,checked,controls,default,defer,disabled,formnovalidate,hidden,ismap,itemscope,loop,multiple,muted,novalidate,open,readonly,required,reversed,scoped,seamless,selected,sortable,typemustmatch,html')));

  esc = function(s) {
    if (s == null) {
      s = '';
    }
    return String(s).replace(/&/g, '&amp;').replace(/</g, '&lt;');
  };

  esca = function(s) {
    return esc(s).replace(/"/g, '&quot;');
  };

  attr = function(k, v) {
    if (bool[k]) {
      if (v) {
        return "" + (esca(k));
      } else {
        return '';
      }
    } else {
      return (esca(k)) + "=\"" + (esca(v)) + "\"";
    }
  };

  attrs = function(a) {
    var k, v;
    return ((function() {
      var results;
      results = [];
      for (k in a) {
        v = a[k];
        results.push(attr(k, v));
      }
      return results;
    })()).join(' ');
  };

  unnest = function(bind) {
    var _unnest;
    return _unnest = function(f) {
      if (isfunction(f)) {
        return _unnest(f.call(bind));
      } else if (isprimitive(f)) {
        return out.text(String(f));
      }
    };
  };

  out = null;

  onlyplain = filter(isplain);

  noplain = filter(nnot(isplain));

  asfun = function(a) {
    if (isfunction(a)) {
      return a;
    } else {
      return function() {
        return a;
      };
    }
  };

  oneobj = function(as) {
    return apply(mixin)(onlyplain(as));
  };

  asfuns = function(as) {
    return map(asfun)(noplain(as));
  };

  tag = function(name, vod) {
    var tagf;
    return tagf = function() {
      var args, funs, objs;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!out) {
        return capture(new StringOut, tagf, args);
      }
      objs = oneobj(args);
      funs = asfuns(args);
      out.begin(name, vod, objs);
      each(unnest(this))(funs);
      if (!vod) {
        out.close(name);
      }
      return void 0;
    };
  };

  pass = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (!out) {
      return capture(new StringOut, pass, args);
    }
    each(unnest(this))(asfuns(args));
    return void 0;
  };

  StringOut = (function() {
    function StringOut() {
      this.buf = [];
    }

    StringOut.prototype.start = function() {};

    StringOut.prototype.begin = function(name, vod, props) {
      var a;
      return this.buf.push(("<" + name) + ((a = attrs(props)).length ? " " + a : "") + ">");
    };

    StringOut.prototype.text = function(t) {
      return this.buf.push(esc(t));
    };

    StringOut.prototype.close = function(name) {
      return this.buf.push("</" + name + ">");
    };

    StringOut.prototype.end = function() {
      return this.buf.join('');
    };

    return StringOut;

  })();

  capture = function(_out, tagf, args) {
    try {
      out = _out;
      out.start();
      apply(tagf)(args != null ? args : []);
    } finally {
      out = null;
    }
    return _out.end();
  };

  maketag = function(vod) {
    return function(n) {
      return keyval(n, tag(n, vod));
    };
  };

  elems = apply(mixin)(map(maketag())(splitcm('html,head,style,title,address,article,body,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,blockquote,dd,div,dl,dt,figcaption,figure,li,main,ol,p,pre,ul,a,abbr,b,bdi,bdo,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,audio,map,video,iframe,object,canvas,noscript,script,del,ins,caption,colgroup,table,tbody,td,tfoot,th,thead,tr,button,datalist,fieldset,form,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,decorator,element,shadow,template')));

  vods = apply(mixin)(map(maketag(true))(splitcm('area,base,br,col,embed,hr,img,input,keygen,link,meta,param,source,track,wbr')));

  html5 = function() {
    var as;
    as = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return tag('!DOCTYPE', true)({
      html: true
    }, '\n', function() {
      return tags.html.apply(tags, as);
    });
  };

  tags = mixin({
    tag: tag,
    capture: capture,
    pass: pass,
    html5: html5
  }, elems, vods);

  if (typeof module === 'object') {
    module.exports = tags;
  } else if (typeof define === 'function' && define.amd) {
    define(function() {
      return tags;
    });
  } else {
    this.tagg = tags;
  }

}).call(this);

//# sourceMappingURL=tagg.js.map
