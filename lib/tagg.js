// Generated by CoffeeScript 1.9.0
(function() {
  var StringOut, attr, attrs, bool, capture, esc, esca, isfunction, isplain, isprimitive, isstring, mixin, not_, out, tag, tags, unnest,
    __slice = [].slice;

  isplain = function(o) {
    return !!o && typeof o === 'object' && o.constructor === Object;
  };

  isstring = function(s) {
    return typeof s === 'string';
  };

  isprimitive = function(a) {
    var _ref;
    return (_ref = typeof a) === 'boolean' || _ref === 'number' || _ref === 'string' || _ref === 'symbol';
  };

  isfunction = function(s) {
    return typeof s === 'function';
  };

  not_ = function(f) {
    return function() {
      var a;
      a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return !f.apply(null, a);
    };
  };

  mixin = function() {
    var k, o, os, r, v, _i, _len;
    os = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    r = {};
    for (_i = 0, _len = os.length; _i < _len; _i++) {
      o = os[_i];
      for (k in o) {
        v = o[k];
        r[k] = v;
      }
    }
    return r;
  };

  bool = {};

  'allowfullscreen,async,autofocus,autoplay,checked,controls,default,defer,disabled,formnovalidate,hidden,ismap,itemscope,loop,multiple,muted,novalidate,open,readonly,required,reversed,scoped,seamless,selected,sortable,typemustmatch,html'.split(',').forEach(function(a) {
    return bool[a] = true;
  });

  esc = function(s) {
    if (s == null) {
      s = '';
    }
    return s.replace(/&/g, '&amp;').replace(/</g, '&lt;');
  };

  esca = function(s) {
    return esc(s).replace(/"/g, '&quot;');
  };

  attr = function(k, v) {
    if (bool[k]) {
      if (v) {
        return "" + (esca(k));
      } else {
        return '';
      }
    } else {
      return (esca(k)) + "=\"" + (esca(v)) + "\"";
    }
  };

  attrs = function(a) {
    var k, v;
    return ((function() {
      var _results;
      _results = [];
      for (k in a) {
        v = a[k];
        _results.push(attr(k, v));
      }
      return _results;
    })()).join(' ');
  };

  unnest = function(bind, f) {
    if (isfunction(f)) {
      return unnest(bind, f.call(bind));
    } else if (isprimitive(f)) {
      return out.text(String(f));
    }
  };

  out = null;

  tag = function(name, vod, ispass) {
    var tagf;
    if (ispass == null) {
      ispass = false;
    }
    return tagf = function() {
      var args, f, funs, objs, _i, _len;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!out) {
        return capture(new StringOut, tagf, args);
      }
      objs = args.filter(isplain).reduce((function(p, c) {
        return mixin(p, c);
      }), {});
      funs = args.filter(not_(isplain)).map(function(a) {
        if (!isfunction(a)) {
          return function() {
            return a;
          };
        } else {
          return a;
        }
      });
      if (!ispass) {
        out.begin(name, vod, objs);
      }
      for (_i = 0, _len = funs.length; _i < _len; _i++) {
        f = funs[_i];
        unnest(this, f);
      }
      if (!vod) {
        out.close(name);
      }
      return void 0;
    };
  };

  StringOut = (function() {
    function StringOut() {
      this.buf = [];
    }

    StringOut.prototype.start = function() {};

    StringOut.prototype.begin = function(name, vod, props) {
      var a;
      return this.buf.push(("<" + name) + ((a = attrs(props)).length ? " " + a : "") + ">");
    };

    StringOut.prototype.text = function(t) {
      return this.buf.push(esc(t));
    };

    StringOut.prototype.close = function(name) {
      return this.buf.push("</" + name + ">");
    };

    StringOut.prototype.end = function() {
      return this.buf.join('');
    };

    return StringOut;

  })();

  capture = function(_out, tagf, args) {
    try {
      out = _out;
      out.start();
      tagf.apply(this, args != null ? args : []);
    } finally {
      out = null;
    }
    return _out.end();
  };

  tags = {
    tag: tag,
    capture: capture
  };

  'html,head,style,title,address,article,body,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,blockquote,dd,div,dl,dt,figcaption,figure,li,main,ol,p,pre,ul,a,abbr,b,bdi,bdo,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,audio,map,video,iframe,object,canvas,noscript,script,del,ins,caption,colgroup,table,tbody,td,tfoot,th,thead,tr,button,datalist,fieldset,form,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,decorator,element,shadow,template'.split(',').forEach(function(t) {
    return tags[t] = tag(t);
  });

  'area,base,br,col,embed,hr,img,input,keygen,link,meta,param,source,track,wbr'.split(',').forEach(function(t) {
    return tags[t] = tag(t, true);
  });

  tags.pass = tag('pass', true, true);

  tags.html5 = function() {
    var as;
    as = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return tag('!DOCTYPE', true)({
      html: true
    }, '\n', function() {
      return tags.html.apply(tags, as);
    });
  };

  if (typeof module === 'object') {
    module.exports = tags;
  } else if (typeof define === 'function' && define.amd) {
    define(function() {
      return tags;
    });
  } else {
    this.tagg = tags;
  }

}).call(this);

//# sourceMappingURL=tagg.js.map
